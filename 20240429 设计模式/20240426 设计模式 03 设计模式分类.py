
"""
设计模式分类：
1.创建型模式：
- 工厂模式（Factory Pattern）：定义一个用于创建对象的接口，让子类决定实例化哪一个类。
- 抽象工厂模式（Abstract Factory Pattern）：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
- 单例模式（Singleton Pattern）：保证一个类仅有一个实例，并提供一个访问它的全局点。
- 建造者模式（Builder Pattern）：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
- 原型模式（Prototype Pattern）：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。

2.结构型模式（7种）：
- 适配器模式（Adapter Pattern）：将一个类的接口转换成客户希望的另一个接口，使得原本由于接口不兼容而不能一起工作的两个类可以一起工作。
- 组合模式（Composite Pattern）：将对象组合成树形结构以表示“部分-整体”的层次结构。
- 装饰器模式（Decorator Pattern）：动态地给对象添加额外的职责。
- 外观模式（Facade Pattern）：为子系统中的一组接口提供一个一致的界面。
- 享元模式（Flyweight Pattern）：运用共享技术有效地支持大量细粒度的对象。
- 代理模式（Proxy Pattern）：为其他对象提供一种代理以控制对这个对象的访问。代理模式有多种变体，例如远程代理、虚拟代理和保护代理。
- 桥模式（Bridge Pattern）：部分与它的实现部分分离，使它们都可以独立地变化。桥模式通常用于让一个类的接口和它的实现解耦。

3.行为型模式（11种）：
- 责任链模式（Chain of Responsibility Pattern）：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。
- 命令模式（Command Pattern）：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分开。
- 解释器模式（Interpreter Pattern）：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
- 迭代器模式（Iterator Pattern）：提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。
- 中介者模式（Mediator Pattern）：定义一个中介对象来简化对象之间的通信，并支持松耦合。
- 备忘录模式（Memento Pattern）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。
- 观察者模式（Observer Pattern）：定义对象间的一种一对多依赖，当一个对象改变状态时，所有依赖于它的对象都得到通知并自动更新。
- 状态模式（State Pattern）：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。
- 策略模式（Strategy Pattern）：定义一系列的算法，并将每个算法封装起来，使它们可以相互替换。
- 模板方法模式（Template Method Pattern）：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。
- 访问者模式（Visitor Pattern）：表示一个作用于某对象结构中的各元素的操作。它使得我们可以定义一个作用于元素的新操作，而不改变其结构。
"""

